














AGORA DEVEMOS APRENDER

SOBRE 



"""COMO PODEMOS FAZER O SHARE DE VIEWS""...











--> ISSO PQ, ATÉ AGORA,

APENAS VIMOS ""COMO PODEMOS FAZER 

O SHARE DE ENTIRE TABLES/SCHEMAS/DATABASES"....










-- MAS EM UM CENÁRIO DA VIDA REAL,


TALVEZ EXISTAM CASOS EM QUE:




1) TEMOS UMA TABLE


2) MAS NAO QUEREMOS COMPARTILHAR __ tODA 
A _ DATA DENTRO DESSA TABLE...



3) POR ISSO QUEREMOS COMPARTILHAR APENAS 1 VIEW,

E AÍ COMPARTILHAR APENAS A DATA CONTIDA NESSA VIEW,

NESSA VIEW QUE LIMITA A DATA DO CONJUNTO/TABLE INTEIRA..

















--> é por isso que o professor quer nos mostrar 



a maneira pela qual podemos fazer o share de uma view...







o código, como sempre, comeca assim:





-- CREATE DATABASE AND TABLE --

CREATE OR REPLACE DATABASE CUSTOMER_DB;


CREATE OR REPLACE TABLE CUSTOMER_DB.public.customers (
    ID INT,
    FIRST_NAME STRING,
    LAST_NAME STRING,
    EMAIL STRING,
    GENDER STRING,
    JOB STRING,
    PHONE STRING
);


-- Stage and File Format -- 

CREATE OR REPLACE FILE FORMAT MANAGE_DB.file_formats.csv_file
    TYPE=CSV,
    FIELD_DELIMITER=',',
    SKIP_HEADER=1;

-- Create Stage --

CREATE OR REPLACE STAGE MANAGE_DB.stages.time_travel_stage
    URL='s3://data-snowflake-fundamentals/time-travel/';



-- LIST FILES IN STAGE --

LIST @MANAGE_DB.stages.time_travel_stage;


-- COPY DATA AND INSERT IT INTO TABLE -- 

COPY INTO CUSTOMER_DB.public.customers
FROM @MANAGE_DB.stages.time_travel_stage
FILES=('customers.csv');













CERTO...





ISSO VAI COPIAR TODA ESSA DATA PARA DENTRO DESSA TABLE...












--> DEPOIS, TEMOS:



SELECT * FROM CUSTOMER_DB.PUBLIC.CUSTOMERS;
















AGORA DEVEMOS APRENDER

SOBRE 



"""COMO PODEMOS FAZER O SHARE DE VIEWS""...











--> ISSO PQ, ATÉ AGORA,

APENAS VIMOS ""COMO PODEMOS FAZER 

O SHARE DE ENTIRE TABLES/SCHEMAS/DATABASES"....










-- MAS EM UM CENÁRIO DA VIDA REAL,


TALVEZ EXISTAM CASOS EM QUE:




1) TEMOS UMA TABLE


2) MAS NAO QUEREMOS COMPARTILHAR __ tODA 
A _ DATA DENTRO DESSA TABLE...



3) POR ISSO QUEREMOS COMPARTILHAR APENAS 1 VIEW,

E AÍ COMPARTILHAR APENAS A DATA CONTIDA NESSA VIEW,

NESSA VIEW QUE LIMITA A DATA DO CONJUNTO/TABLE INTEIRA..

















--> é por isso que o professor quer nos mostrar 



-- a maneira pela qual podemos fazer o share de uma view...







-- o código, como sempre, comeca assim:





-- CREATE DATABASE AND TABLE --

CREATE OR REPLACE DATABASE CUSTOMER_DB;


CREATE OR REPLACE TABLE CUSTOMER_DB.public.customers (
    ID STRING,
    FIRST_NAME STRING,
    LAST_NAME STRING,
    EMAIL STRING,
    GENDER STRING,
    JOB STRING,
    PHONE STRING
);


-- Stage and File Format -- 

CREATE OR REPLACE FILE FORMAT MANAGE_DB.file_formats.csv_file
    TYPE=CSV,
    FIELD_DELIMITER=',',
    SKIP_HEADER=1;

-- Create Stage --

CREATE OR REPLACE STAGE MANAGE_DB.stages.time_travel_stage
    URL='s3://data-snowflake-fundamentals/time-travel/';



-- LIST FILES IN STAGE --

LIST @MANAGE_DB.stages.time_travel_stage;


-- COPY DATA AND INSERT IT INTO TABLE -- 

COPY INTO CUSTOMER_DB.public.customers
FROM @MANAGE_DB.stages.time_travel_stage
FILES=('customers.csv')
FILE_FORMAT=(
FORMAT_NAME=MANAGE_DB.file_formats.csv_file
);


TRUNCATE TABLE CUSTOMER_DB.public.customers;


--> DEPOIS, TEMOS:



SELECT * FROM CUSTOMER_DB.PUBLIC.CUSTOMERS;



-- Create View -- 
CREATE OR REPLACE VIEW CUSTOMER_DB.PUBLIC.CUSTOMER_VIEW
AS SELECT 
FIRST_NAME,
LAST_NAME,
EMAIL
FROM CUSTOMER_DB.PUBLIC.CUSTOMERS;





-- ISSO VAI CRIAR NOSSA VIEW,



-- VAI SELECIONAR APENAS ALGUNS FIELDS 

-- DE 

-- NOSSA TABLE (
--     no caso, vai deixar JOB E PHONE como informacoes omitidas...
-- )












OK... CONSEGUIMOS, CRIAMOS ESSA VIEW...










-> TAMBÉM PODEMOS CRIAR 



OUTROS TIPOS DE VIEW,





COMO ESTA:







-- Create VIEW --

CREATE OR REPLACE VIEW CUSTOMER_DB.PUBLIC.CUSTOMER_VIEW_2
AS 
SELECT 
FIRST_NAME,
LAST_NAME,
EMAIL
FROM CUSTOMER_DB.PUBLIC.CUSTOMERS
WHERE JOB != 'DATA_SCIENTIST';










--> OK... COM ISSO, MOSTRAMOS 


TODOS OS 

ROWS QUE NAO TENHAM JOB DE "DATA SCIENTIST",

E SERAO MOSTRADAS 
 APENAS ESSAS COLUMNS ESPECÍFICAS (sem phone 
e sem job, por exemplo),

SENDO OMITIDOS OS OUTROS 
FIELDS....










PODEMOS VISUALIZAR ISSO COM 




SELECT * FROM CUSTOMER_DB.PUBLIC.CUSTOMER_VIEW_2;


















OK... CRIADA ESSA VIEW, CUSTOMER_VIEW_2,








QUEREMOS 

VER __ QUAL É O PROBLEMA __ 


SE QUISERMOS 


__fAZER O SHARE __ DESSA VIEW 


COM NOSSAS READER ACCOUNTS..







--> PARA MOSTRAR O PROBLEMA,
O PROFESSOR SELECIONA O 

ROLE DE PUBLIC, NA CONTA MAIN,

E AÍ TENTA 


RODAR 1 QUERY EM CIMA DESSA VIEW...




MAS ANTES DISSO, O PROFESSOR CONFERE 


USAGE DA DATABASE, SCHEMA, TABLE E 
VIEW MEXIDOS POR NÓS 

__ A TODOS OS USERS DE NOSSA CONTA,

POR MEIO DO GRANT DE USAGE 

E SELECT __ A ESSAS COISAS ___ AO ROLE DE 

"PUBLIC" (QUE TODOS OS USERS POSSUEM):




-- Grant USAGE and SELECT to public (All accounts) --
GRANT USAGE ON DATABASE CUSTOMER_DB TO ROLE PUBLIC;
GRANT USAGE ON SCHEMA CUSTOMER_DB.PUBLIC TO ROLE PUBLIC;
GRANT SELECT ON TABLE CUSTOMER_DB.PUBLIC.CUSTOMERS TO ROLE PUBLIC;
GRANT SELECT ON VIEW CUSTOMER_DB.PUBLIC.CUSTOMER_VIEW_2 TO ROLE PUBLIC;











DEPOIS, RODAMOS 1 SELECT EM CIMA 



DESSA VIEW, TIPO ASSIM:







SELECT * FROM CUSTOMER_DB.PUBLIC.CUSTOMER_VIEW_2;













OK, MESMO RESULTADO DE ANTES...






--> ANTES DISSO, TROCAMOS PARA O ROLE DE "PUBLIC",


PARA CONSTATAR SE ESSA VIEW REALMENTE FICOU disponível

A TODOS USERS DE NOSSA CONTA...












OK... CONSEGUIMOS ACESSO A ESSA VIEW, SEM PROBLEMAS..







-> MAS FICAMOS COM 1 PROLBEMA, NESSA VIEW...








---> O PROFESSOR DIZ QUE 


1 INFO DE "CREATE OR REPLACE"

FICOU VISÍVEL DENTRO 

DESSA VIEW (info que nao gostaríamos de 
compartilhar com o customer, no caso)






EX:


SHOW VIEWS;



--> PODEMOS VISUALIZAR ESSA INFO INDESEJÁVEL 


COM "SHOW VIEWS" --> SE EXAMINARMOS 


NOSSOS ROWS, TEMOS 1 COLUMN DE 


""TEXT"",

QUE CONTÉM A QUERY QUE RODAMOS 

PARA CRIAR NOSSA VIEW (

    COM OS FIELDS QUE QUISEMOS 
    OMITIR...
)



----------------------








OK, MAS COMO DIABOS PODEMOS _ _OMITIR__ 




ESSA INFO DE "text", a definicao da criacao de nossa 

view,

DA PRÓPRIA VIEW EM SI...?









--> BEM, DIGAMOS QUE, NA COLUMN DE TEXT,


TENHAMOS ESTE VALUE:





CREATE OR REPLACE VIEW CUSTOMER_DB.PUBLIC.CUSTOMER_VIEW_2 
AS SELECT 
FIRST_NAME,
LAST_NAME,
EMAIL
FROM CUSTOMER_DB.PUBLIC.CUSTOMERS
WHERE JOB != 'DATA SCIENTIST';

















DIGAMOS QUE ___NAO QUEREMOS QUE O FIELD DE "JOB"


SEJA MOSTRADO/MENCIONADO NESSA DEFINITION...








OU, ENTAO, NAO QUEREMOS QUE O VALUE 

"DATA SCIENTIST"

SEJA MOSTRADO...










--> ESSA PODE SER UMA INFO QUE _ NAO GOSTARÍAMOS DE MOSTRAR...











--> E ESSA É A RAZAO, NO CASO,



QUE FAZ COM QUE VIEWS DESSE TIPO __ NAO 
SEJAM
 

 CAPAZES DE SEREM __ COMPARTILHADAS 


 COM OUTRAS ACCOUNTS...






-- QUER DIZER QUE, NO SNOWFLAKE,



-- APENAS É 

-- POSSÍVEL 

-- FAZER __ SHARE__ DE 1 TIPO MT ESPECÍFICO 


-- DE VIEW,


-- QUE SAO AS CHAMADAS """"SECURE VIEWS"""""...














-- SECURE VIEW --> É SIMPLESMENTE 1 

-- VIEW MAIS 

-- ""STRICT"" EM TERMOS DE DATA PROTECTION....








--> É MAIS SEGURA...










-- --> ISSO 


-- PQ HÁ UM 


-- PUNHADO DE MANEIRAS 



-- QUE PODEMOS USAR 

-- PARA RETRIEVAR 


-- INFO 

-- QUE __ NUNCA DEVERIA/DEVE 

-- FICAR AVAILABLE PARA INÍCIO DE CONVERSA,





-- JUSTAMENTE COMO AQUELE FIELD DE 

-- "text" DENTRO 


-- DAS ROWS MOSTRADAS COM "SHOW VIEWS;",









-- em que encontramos values como este:










CREATE OR REPLACE VIEW CUSTOMER_DB.PUBLIC.CUSTOMER_VIEW_2 
AS SELECT 
FIRST_NAME,
LAST_NAME,
EMAIL
FROM CUSTOMER_DB.PUBLIC.CUSTOMERS
WHERE JOB != 'DATA SCIENTIST';














-- QUE REALMENTE ACABAM "ENTREGANDO O JOGO",


-- NOS FORNECENDO A INFO DE QUE O VALUE DE 

-- "DATA SCIENTIST"


-- REALMENTE EXISTE NESSA TABLE....


















--> MAS COM A SECURE VIEW,

FICAMOS COM MAIOR DATA PROTECTION,



TUDO PARA QUE _ _APENAS 


"DATA THAT WE ARE ALLOWED TO SEE" 



SEJA MOSTRADA NA SHARE...










--> É POR ISSO, JUSTAMENTE,




QUE __ O SNOWFLAKE __ APENAS __ PERMITE



O SHARE__ DE SECURE _VIEWS...








--> VIEWS COMUNS __ NAO PODEM SER SHAREADAS...

















--> OK, MAS COMO PODEMOS CRIAR 1 DESSAS 

SECURE VIEWS?








--> NOVAMENTE, USAMOS O COMANDO 'CREATE OR REPLACE',,

TIPO ASSIM:







-- Create SECURE VIEW -- 

CREATE OR REPLACE SECURE VIEW CUSTOMER_DB.PUBLIC.SECURE_CUSTOMER_VIEW 
AS 
SELECT 
FIRST_NAME,
LAST_NAME,
EMAIL
FROM CUSTOMER_DB.PUBLIC.CUSTOMERS 
WHERE JOB != 'DATA SCIENTIST';






-- --> OK... QUER DIZER QUE É EXATAMENTE COMO O 

-- CREATE DE 1 VIEW NORMAL,



-- MAS COM A ADICAO DESSE TERMO "SECURE" NA FRENTE.







-- CERTO... CRIADA ESSA SECURE VIEW,



-- GOSTARÍAMOS DE FAZER 

-- "GRANT" DAS PERMISSIONS,




-- POR ISSO 

-- ESCREVEMOS ASSIM:





GRANT SELECT ON VIEW CUSTOMER_DB.PUBLIC.SECURE_CUSTOMER_VIEW TO ROLE PUBLIC;




SHOW VIEWS;






-- COM ISSO, NOSSA VIEW/SECURE VIEW 



-- FICA COM 1 VALUE EM BRANCO 


-- NAQUELE FIELD DE "text",

-- o que quer dizer que 





-- AS INFOS DE CRIACAO DESSA VIEW/SECURE VIEW 



-- __FORAM OCULTADAS...



-- -> ISSO É ÚTIL PARA QUANDO QUEREMOS QUE 


-- OS DETAILS DAS VIEWS SEJAM OCULTOS,





-- PRINCIPALMENTE QUANDO FAZEMOS O SHARE 

-- DE VIEWS COM OUTRAS ACCOUNTS....











--_> A SECURE VIEW APENAS DEIXA O CONSUMER VER 

-- A DATA QUE REALMEMENTE É 

-- INCLUSA/FOI INCLUSA NA VIEW....