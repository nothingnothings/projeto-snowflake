






BEM, SE QUISERMOS FAZER O COPY DE DATA 

NAS NOSSAS TABLES,




É BEM ÚTIL/HANDY  


SER __ CAPAZ_ _ DE ___ TRANSFORMAR ___ ESSA 

DATA ENQUANTO 

ESTAMOS 

FAZENDO O COPY DA MESMA....








E, NO SNOWFLAKE, USANDO O COMANDO DE COPY,




__ NÓS PODEMOS ACTUALLY FAZER ISSO...








PORTANTO, NESSA LECTURE,


VEREMOS ___ COMO PODEMOS __ TRANSFORM __ A NOSSA DATA...








--> VEREMOS COMO PODEMOS _TRANSFORMAR NOSSA DATA 




USANDO O ___COPY_ STATEMENT...



COPY INTO TABLE_NAME _ FROM __STAGE_NAME__...












--> PARA ____tRANSFORMAR __ A DATA, ENQUANTO FAZEMOS 

COPY DELA,

__ DEVEMOS UTILIZAR ___ SELECT STATEMENTS...







UM EXEMPLO DE QUERY QUE __fAZ O TRANSFORM DE DATA ENQUANTO A COPIA 

DE 
1 

STAGE É ESTA:





COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX 
FROM (select s.$1, s.$2 FROM @MANAGE_DB.external_stages.aws_stage s)
file_format=(
    type=csv,
    field_delimiter=';',
    skip_header=1
    )
    files=('OrderDetails.csv');
















QUER DIZER QUE, EM VEZ 

DE SE REFERIR AO STAGE EM SI,



PODEMOS USAR 1 SELECT STATEMENT (com o FROM)...





--> DEVEMOS DAR 1 OLHADA NESSA SINTAXE,

E EM COMO PODEMOS USAR ESSE SELECT 

STATEMENT AÍ...









-> UMA COISA IMPORATNTE É QUE O PROFESSOR USOU 

1 ALIAS,

LÁ NO FINAL (

    aquele "s"... --> coloquei "s_alias",

    para ficar mais óbvio...
)








EX:






COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX 
-- podemos fazer o TRANSFORM de data, enquanto a copiamos para 1 table snowflake, POR MEIO DE SELECT STATEMENTS, por exemplo...
FROM (select s.$1, s.$2 FROM @MANAGE_DB.external_stages.aws_stage s_alias)
file_format=(
    type=csv,
    field_delimiter=';',
    skip_header=1
    )
    files=('OrderDetails.csv');





----------------------------





--> ISSO QUER DIZER QUE 


ESSE STAGE NAME GANHA 1 ALIAS,



E O UTILIZAMOS 

com o ".$1 e ".$2',

tipo assim:











COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX 
-- podemos fazer o TRANSFORM de data, enquanto a copiamos para 1 table snowflake, POR MEIO DE SELECT STATEMENTS, por exemplo...
FROM (select s_alias.$1, s_alias.$2 FROM @MANAGE_DB.external_stages.aws_stage s_alias)
file_format=(
    type=csv,
    field_delimiter=';',
    skip_header=1
    )
    files=('OrderDetails.csv');







--------------------------------------




    OK... QUER DIZER QUE AQUI FIZEMOS SELECT 


APENAS DE 2 FIELDS 




DESSE STAGE 

DE "aws_stage" (Que ficou representado como "s_alias", esse alias)...














EX:










COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX 
-- podemos fazer o TRANSFORM de data, enquanto a copiamos para 1 table snowflake, POR MEIO DE SELECT STATEMENTS, por exemplo...
--- assim, o stage inteiro fica representado por 1 alias, o alias de "s_alias"... e entao conseguimos selecionar apenas alguns de seus fields, com s_alias.$1 e s_alias.$2....
FROM (select s_alias.$1, s_alias.$2 FROM @MANAGE_DB.external_stages.aws_stage s_alias)
file_format=(
    type=csv,
    field_delimiter=';',
    skip_header=1
    )
    files=('OrderDetails.csv');














E ESSA É UMA _ BEST-PRACTICE...




NAO É OBRIGATÓRIO,

MAS É BOM FAZER...












--> COM "$1' 


E "$2",



nos referimos aos COLUMN __ NUMBERS... 1 e 2...











SE EXAMINAMOS NOSSA FILE,


CONSTATAMOS QUE ISSO É A COLUMN NUMBER ONE,

E A OUTRA A NUMBER 2...




a column number one é A ORDERID,



E A COLUMN NUMBER TWO 

É O __ AMOUNT....





--> ISSO PQ USAMOS ___ 


ESSA FILE DE "ORDER_DETAILS"...








--> E É ISSO QUE 

CRIAMOS NAS NOSSAS TABLES TAMBÉM,


COM ESTA QUERY:








CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS (
    ORDER_ID VARCHAR(30),
    AMOUNT INT
)











EX:











COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX 
-- podemos fazer o TRANSFORM de data, enquanto a copiamos para 1 table snowflake, POR MEIO DE SELECT STATEMENTS, por exemplo...
--- assim, o stage inteiro fica representado por 1 alias, o alias de "s_alias"... e entao conseguimos selecionar apenas alguns de seus fields, com s_alias.$1 e s_alias.$2....
FROM (select s_alias.$1, s_alias.$2 FROM @MANAGE_DB.external_stages.aws_stage s_alias)

--$1 é O ORDER_ID... $2 É O AMOUNT...
file_format=(
    type=csv,
    field_delimiter=';',
    skip_header=1
    )
    files=('OrderDetails.csv');







CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX (
    ORDER_ID VARCHAR(30),
    AMOUNT INT
);




--------------------------







CRIADA ESSA TABLE,





DEVEMOS DAR 1 OLHADA NESSE COPY STATEMENT...















--> RODAMOS ISSO AÍ,



E ELE FUNCIONARIA,


MAS FICAMOS COM 1 ERROR EM 1 DOS IDS....





"

STRING B-12123312231,312321 IS TOO LONG 

AND WOULD BE 
TRUNCATED...



"




--> ACHO QUE É PQ COLOQUEI O FIELD_DELIMITER 

ERRADO (deve ser ',', e nao ';')













OK... CONSEGUI...


1500 ROWS FORAM PARSEADOS E INSERIDOS 


NA TABLE...






DEVEMOS DAR 1 OLHADA NO RESULTADO...









FICAMOS COM 2 COLUMNS...



"ORDER_ID"



e

"AMOUNT'....












--> A ESTRUTURA É TIPO:









ORDER_iD 


B-25601          1,275 
B-25601          66














--> OK... 



COM ISSO, REALIZAMOS 1 SELECT STATEMENT 

BEM BÁSICO,

EM CIMA 

DE 1 DE NOSSOS STAGES...

















--> OK... MAS COMO PODEMOS TRANSFORMAR 

ESSA DATA?





PQ, SIM, PODEMOS 


_SELECIONAR 1 SUBSET DE COLUMNS,


MAS AGORA 

QUEREMOS 


SABER 



_cOMO __ PODEMOS __ TRANSFORMAR __ ESSA 


DATA,



OBTER ALGO TOTALMENTE NOVO...










-> PARA ISSO, 

PARA DEMONSTRAR,



VAMOS CRIAR 1 NOVA TABLE..







--> NESSA NOVA TABLE,
TEREMOS 4 COLUMNS...










VAMOS CRIAR 1 NOVA TABLE...







TIPO ASSIM:







CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX (

    ORDER_ID VARCHAR(30),
    AMOUNT INT,
    PROFIT INT,
    PROFITABLE_FLAG VARCHAR(30)
);













TEMOS "ORDER_ID' 


e "amount' como antes,

MAS AGORA 
TEREMOS TAMBÉM 


"PROFIT" 
E "pROFITABLE_FLAG"....





ESSAS 3 COLUMNS INICIAIS SERAO IGUAIS,



MAS __ A QUARTA SERA 
CRIADA 

__ A PARTIR __ DE SQL FUNCTIONS 
(RECURSO SQL)...









OK, MAS COMO...





ESSA PROFITABLE_FLAG,

SERÁ CRIADA USANDO SQL FUNCTIONS...













isso pq, no SNOWFLAKE,

podemos usar 

UM __ SUBSET-_ DE SQL FUNCTIONS 



___ PARA __ REALIZAR __O  TRANSFORM 


DE NOSSA DATA...








O PROFESSOR DISSE """SUBSET"""


DE FUNCTIONS SQL... --> ISSO PQ 


__ NEM TODAS AS SQL FUNCTIONS 


FUNCIONAM COM O SNOWFLAKE...

















MAS NA PÁGINA DO SNOWFLAKE,


NOS DOCS,


PODEMOS VER UMA LISTA DE TODAS AS FUNCTIONS 

SUPORTADAS...






TEMOS MTAS FUNCTIONS...










--> TEMOS O LINK 

PARA AS FUNCTIONS 

NESSA LECTURE...








A PRIMEIRA FUNCTION QUE USAREMOS 


SERÁ A 


""CASE WHEN""....






USAREMOS ESSA FUNCTION EM COMBINACAO 

COM A FUNCTION DE 

"""CAST"""...










PRIMEIRAMENTE,
DEVEMOS COMPREENDER A FUNCTION DE 

"CAST"...









explicacao -- como estamos copiando data 
de ARQUIVOS 

CSV,



ELES SAO GERALMENTE TODOS TEXT...








--> OK... COMO TUDO É TEXT,

TEMOS QUE _ TRANSFORMAR __ O DATA type...













O STATEMENT INTEIRO É ESTE:







COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX

-- CASE e CAST sao SQL FUNCTIONS... -- os fields sao $1 -> order_id, $2 -> amount, $3 -> profit, $4 -> profitable_flag
    FROM (select 
            s.$1,
            s.$2, 
            s.$3,
            CASE WHEN CAST(s.$3 as int) < 0 THEN 'not profitable' ELSE 'profitable' END 
          from @MANAGE_DB.external_stages.aws_stage s)
    file_format= (type = csv field_delimiter=',' skip_header=1)
    files=('OrderDetails.csv');





--> TEMOS QUE ESTUDAR MAIS ESSAS SQL FUNCTIONS...







O LINK DO PROFESSOR:




a function de "CAST":





--> A DATA ESTÁ EM TEXT...







---> implicitamente, a data 

do csv já é transformada



pelo data type em INTEGERS,

por conta 

de "PROFIT INT"....









PARA COMPREENDER 


A QUERY DO PROFESSOR,






ESTE CÓDIGO É ÚTIL:









SELECT 
    customer_id, //column 1
    order_date, //column 2
    CASE
        WHEN CAST(order_total AS DECIMAL) >= 1000 THEN 'High'
        WHEN CAST(order_total AS DECIMAL) >= 500 THEN 'Medium'
        ELSE 'Low'
    END AS order_category //column 3 (era para ser "order_total", mas manipulamos e criamos uma column de "order_category" com base nela).
FROM
    orders;




-- O FORMATO DO RESULT SET FICARIA ASSIM:

-- customer_id | order_date  | order_category
-- -----------------------------------------
-- 1           | 2023-06-15  | Medium
-- 2           | 2023-07-02  | High
-- 3           | 2023-06-29  | Low
-- 4           | 2023-07-05  | High
-- 5           | 2023-06-18  | Medium









----------------------------












código do professor:











COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX

    FROM (select 
            s.$1,
            s.$2, 
            s.$3,
            CASE WHEN CAST(s.$3 as int) < 0 THEN 'not profitable' ELSE 'profitable' END 
          from @MANAGE_DB.external_stages.aws_stage s)
    file_format= (type = csv field_delimiter=',' skip_header=1)
    files=('OrderDetails.csv');












---> quer dizer que teremos 4 columns no result set...




field 1,2,3 e entao profitable/not profitable...






só nao sei qual é o NOME que essa column 4 terá,

pq o professor nao assignou nome algum (
    precisaria do statement 
    "END AS xxxx"...
)












no início do run do statement,



como estamos copiando data 

de arquivos csv,


esses arquivos geralmente 

possuem apenas TEXTO nas cédulas...





é por isso que ele usa CAST(s.$3 as INT),




pq ele planeja UTILIZAR ESSES VALUES
 

 COM COMPARACOES MATEMÁTICAS (< 0, por exemplo)...














OK... MUDAMOS O DATATYPE PARA INT...












O PROFESSOR FALA TAMBÉM DA FUNCTION 

"CASE WHEN"...






-> comecamos com o comando "CASE",


e entao 


COLOCAMOS O "WHEN", QUE VAI 

DEFINIR AS CONDITIONS...



tipo estas conditions:








CASE
        WHEN CAST(order_total AS DECIMAL) >= 1000 THEN 'High'
        WHEN CAST(order_total AS DECIMAL) >= 500 THEN 'Medium'
        ELSE 'Low'
    END AS order_category 





NO CASO DO PROFESSOR,
 

 UMA FORMATACAO MELHOR SERIA:






COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX
    FROM (select 
            s.$1,
            s.$2, 
            s.$3,
            CASE
                  WHEN CAST(s.$3 as int) < 0 THEN 'not profitable' 
                  ELSE 'profitable' 
            END //column 4, nesse result set.
          from @MANAGE_DB.external_stages.aws_stage s)
    file_format= (type = csv field_delimiter=',' skip_header=1)
    files=('OrderDetails.csv');













OK...



É ISSO QUE QUEREMOS, NESSE STATEMENT...








a quarta column realmente nao teria um nome,
a princípio,


mas o professor havia escrito isto:





CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX (
  ORDER_ID VARCHAR(30),
  AMOUNT INT,
  PROFIT INT,
  PROFITABLE_FLAG VARCHAR(30)
);








OU SEJA,


já tínhamos escrito 



a criacao de 1 table com 4 columns...










a única coisa que fazemos, com isto:





COPY INTO OUR_FIRST_DB.PUBLIC.ORDERS_EX
    FROM (select 
            s.$1,
            s.$2, 
            s.$3,
            CASE
                  WHEN CAST(s.$3 as int) < 0 THEN 'not profitable' 
                  ELSE 'profitable' 
            END //column 4, nesse result set.
          from @MANAGE_DB.external_stages.aws_stage s)
    file_format= (type = csv field_delimiter=',' skip_header=1)
    files=('OrderDetails.csv');











É COPIAR DATA PARA DENTRO DESSA TABLE,

AO MESMO TEMPO QUE __ TRANSFORMAMOS ESSA DATA...








OK... VAMOS RODAR ESSA QUERY...





a data daquele bucket é entao 

TRANSFORMADA E COPIADA PARA 
DENTRO 

DE NOSSA TABLE...














ok... consegui loadar na table....





PODEMOS VER O RESULTADO,


COM 


SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS_EX;









--> PARA OS VALUES POSITIVOS,

TEMOS 

PROFITABLE,


PARA OS NEGATIVOS TEMOS NOT PROFITABLE...










-> É EXATAMENTE ISSO QUE QUEREMOS...








DEVEMOS VISUALIZAR OUTRO EXEMPLO SQL...








NESSE EXEMPLO, QUEREMOS 



USAR __ 1 SUBSTRING__ EM VEZ 


DO CATEGORY NAME ___ COMPLETO___...







--> talvez o category name seja 

mt longo, e queremos extrair apenas 

1 substring... talvez apenas 


os primeiros 5 caracteres....




--> quer dizer que talvez será necessário 

usar coisas como "LIKE"...


--> na verdade, usaremos 

"SUBSTRING"....






-_> PRECISAMOS FAZER O CREATE DA TABLE ANTES....




NA VERDADE, VAMOS RECRIAR A TABLE DE ANTES,

COM "CREATE OR REPLACE",


MAS AGORA COM ESSA COLUMN 

DE "CATEGORY_SUBSTRING",

criada usando a function "substring()"


do sql...









tipo assim:







CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX (
  ORDER_ID VARCHAR(30),
  AMOUNT INT,
  PROFIT INT,
  CATEGORY_SUBSTRING VARCHAR(5)
);












PARA ISSO, VAMOS:



1) PEGAR A COLUMN DE NÚMERO 5, NO NOSSO CSV (com s_alias.$5)



2) RODAR substring() em cima dessa column de number 5..








--> é por isso que fica tipo 




substring(s_alias.$5, 1, 5)




(1-5 -> SIGNIFICA QUE QUEREMOS PEGAR DO SLOT 1 AO SLOT 5,

EM CADA 1 DAS STRINGS)...







ex:



CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.ORDERS_EX (
  ORDER_ID VARCHAR(30),
  AMOUNT INT,
  PROFIT INT,
  CATEGORY_SUBSTRING VARCHAR(5)
);












ok.... consegui...





foram inseridos 1500 rows...






e o result set ficou assim:








ORDER_iD AMOUNT PROFIT CATEGORY_SUBSTRING


B-25601	    8	  -2	        Cloth
B-25601	    80    -56	        Elect









CERTO.... FAZ SENTIDO...




APENAS OS 5 PRIMEIROS CARACTERES DAQUELA STRING....













OK... ESSES FORAM ALGUNS EXEMPLOS DE TRANSFORMATIONS 

USANDO SQL DATA...







NA PRÓXIMA AULA, VEREMOS MAIS 

OPTIONS QUE PODEMOS USAR, PARA TRANSFORMAR NOSSA 

DATA...