







OK... AGORA FALAREMOS SOBRE IMPORTANTES 

CONSIDERACOES DE TABLE DESIGN,







e as MELHORES PRACTICES QUE TEMOS QUE 
SEGUIR,
AQUI...












MELHORES PRACTICES:

















1) ESCOLHER O TABLE TYPE APROPRIADO PARA SEU CASO....



temos:

a) PERMANENT TABLES 

b) TRANSIENT 

c) TEMPORARY...









PARA "STAGING TABLES", DEVEMOS SEMPRE USAR 


TRANSIENT TABLES...








COMO ASSIM "STAGING TABLES"?









bem, lembre-se daquele esquema:











HR DATA   ----> 
                [  RAW DATA  ]  ----> DATA INTEGRATION  ----> ACCESS LAYER
                (STAGING AREA )     (DATA TRANSFORMATION)      (PRODUCTION)
SALES DATA ---> 








--> LEMBRAMOS QUE 

TEMOS 1 STAGING AREA,


QUE GERALMENTE SERÁ UMA DATABASE/SCHEMA 




EM QUE ___ CARREGAMOS A RAW DATA... 











--> COMO APENAS PRECISAMOS FAZER O __ sTAGE__ 

DA DATA ALI DENTRO (só fica parada, ali),




MAIS TARDE TEMOS AS ETAPAS DE "DATA INTEGRATION"


E 

"ACCESS LAYER"...





TUDO ISSO QUER DIZER QUE __ NAO PRECISAMOS __ DE TANTA 

PROTECTION PARA ESSE LAYER DA RAW DATA, ESSE LAYER DA "STAGING AREA"...









--> É JUSTAMENTE POR ISSO QUE ESSAS STAGING TABLES 


DEVEM SER DO TIPO "TRANSIENT" (mas nao temporary)










--> O USO DE TRANSIENT TABLES NOS AJUDA A 


REDUZIR CUSTOS,


PQ NAO TEMOS QUE PAGAR PELOS 7 DIAS DE FAILSAFE,

E NEM PRECISAMOS PAGAR POR MAIS DO QUE 1 DIA DE TIME TRAVEL...





0 ou 1 dia de time travel...








-- É POR ISSO QUE É UMA BOA IDEIA 


DEIXAR O TABLE TYPE DESSAS STAGING TABLES COMO ___ TRANSIENT...















PERMANENT TABLES --> QEUREMOS AS UTILIZAR COM PRODUCTION DATA...










TRANSIENT TABLES -->  TAMBÉM SAO PERFEITAS PARA DEVELOPMENT,

EM QUE 

ESCREVEMOS UM MONTE DE QUERIES,



E FAZENDO UM MONTE DE DEVELOPMENT WORK.... ---------> É OUTRA BOA PRACTICE 


USAR 1 TRANSIENT TABLE,

PQ NESSAS DEV TABLES 


GERALMENTE TEMOS 1 MONTE DE MUDANCAS --> E ISSO PODE DIMINUIR 




O TAMANHO DA STORAGE UTILIZADA COM TIME TRAVEL E FAILSAFE...



--------------------------------------------------------









OK... ESSAS ERAM AS BEST PRACTICES EM RELACAO AO TABLE TYPE...








DEPOIS, TEMOS:











2) ESCOLHER DATA TYPES APROPRIADOS NAS NOSSAS COLUMNS..









EX: SE TEMOS 1 TABLE LARGA, E TEMOS 1 COLUMN "DATE",

FAZ SENTIDO USAR 

1 DATA TYPE DE "DATE",

PQ 

ELE É BEM MAIS EFICIENTE 

DO QUE 


1 FIELD DE "VARCHAR"....







EX: SE TEMOS 1 COLUMN DE NUMBERS E QUEREMOS RODAR 

CALCULOS COM ELA,

FAZ BEM MAIS SENTIDO QUE ELA FIQUE 


COMO DATA TYPE DE NUMBERS....






        VARCHAR VS VARCHAR(N)









-> NAO PRECISAMOS ESPECIFICAR O NÚMERO DE CARACTERES 


DE 1 VARCHAR,

NAO É OBRIGATÓRIO ---------> O SNOWFLAKE CONSEGUE HANDLAR ISSO  BEM... --> 

EM TERMOS DE STORAGE, QUASE NAO EXISTE DIFERENCA 
ENTRE 
UM


VARCHAR E UM VARCHAR(1000)....










ENTRETANTO,

EM TERMOS DE STORAGE,


SE TIVERMOS CERTEZA ABSOLUTA SOBRE A LENGTH 


DE STRINGS NESSA COLUMN DE VARCHAR,


É BOM DEFINIRMOS 1 VARCHAR ESPECÍFICO (como VARCHAR(10), para CEPS),




PQ ISSO TAMBÉM NOS AJUDA 


COM O FIND DE ERRORS E COISAS 


ERRADAS NA NOSSA DATA...









TEMOS MAIS 1 CONSIDERATION:









3) APENAS CONFIGURE CUSTOM "CLUSTER KEYS" SE ISSO FOR _ ABSOLUTAMENTE 

NECESSÁRIO...


-> ISSO PQ, POR DEFAULT, O CLUSTERING DO SNOWFLAKE JÁ É BEM BOM...








O SNOWFLAKE JÁ FAZ 1 MANAGE DESSAS MICRO-PARTITIONS 

DE FORMA BEM BOA...







CLUSTER KEYS SÓ SAO UTEIS NAS SEGUINTES SITUACOES:


A) UMA TABLE EXTREMAMENTE LARGA...

B) A MAIOR PARTE DO TEMPO DA QUERY É GASTA COM "TABLE SCAN"....

C) SE PRECISAMOS FOCAR NOSSAS QUERIES EM ALGO COMO "TRANSACTION DATE", "REGION", ETC...




SE PRESENTES ESSAS 3 CONDICOES,

PODEMOS REALMENTE NOS BENEFICIAR DE 1 CLUSTER KEY...





--> BASTA CHECAR ISSO NA QUERY HISTORY (
    visualizar o profile da query,

    perceber que a maior parte do tempo foi gasta com 1 table scan...
)













MAS SE TIVERMOS 1 OUTRA COLUMN, QUE MENCIONA A REGION,


REGION QUE FREQUENTEMENTE USAMOS EM 1 QUERY,

PODE FAZER SENTIDO 


COLOCAR 1 CLUSTER KEY NESSA COLUMN.... --------> ISSO TUDO FOI VISTO 
NA SECTION DE "PERFORMANCE"...
---------------------





