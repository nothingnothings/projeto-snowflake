

AGORA FALAREMOS SOBRE OS DIFERENTES TABLE TYPES 

NO SNOWFLAKE...







JÁ OUVIMOS FALAR SOBRE OS TYPES 


""PERMANENT"",

"TEMPORARY"


E 

"TRANSIENT"







-->VAMOS COMECAR A ENTENDER CADA 1 DESSES DIFERENTES 

TABLE TYPES...











VEREMOS PARA QUE CADA 1 DELES SERVE,

PARA ENTAO TRABALHARMOS COM ELES...






O DEFAULT TABLE TYPE É 
O "PERMANENT"...









-- ESSAS SAO AS DEFAULT TABLES,

QUE SAO 
CRIADAS QUANDO SIMPLESMENTE 


ESCREVEMOS O COMANDO DE 



CREATE TABLE...












OK...






--> ESSE TABLE TYPE É UMA TABLE PROPERTY,


E ESSE É O DEFAULT VALUE...








--> É O TABLE TYPE MAIS COMUM....



COM ELE TEMOS AS FEATURES MAIS DEFAULT,


COMO 

"TIME TRAVEL RETENTION PERIOD"


E 

FAILSAFE....

















ENTAO,





1) PERMANENT

-> FAIL-SAFE 

-> TIME TRAVEL RETENTION PERIOD 






--> INFELIZMENTE,

ESSE TIPO DE TABLE PODE LEVAR A CUSTOS MAIS ELEVADOS...






--> MAIS COST DO QUE GOSTARÍAMOS DE TER... -> PQ,


PARA O TIMETRAVEL E FAILSAFE,


TEMOS QUE 

PAGAR PELO STORAGE COSTS...





--> EM OUTRAS PALAVRAS,

NEM TODAS AS TABLES PRECISAM 
TER 

ESSES STRICT E STRONG REQUIREMENTS,


EM TERMOS 

DE DATA PROTECTION...









DEPOIS DISSO, TEMOS O SEGUNDO  TABLE TYPE,

QUE É 

"TRANSIENT"....










2) TRANSIENT 


--> CRIAMOS ESSAS TABLES 

COM O COMANDO ""CREATE TRANSIENT TABLE""...




--> ESSAS TABLES, ESSE TABLE TYPE,

__ TEMOS __ TIME TRAVEL RETENTION PERIOD (
    como as tables default/permanent
)




-> A DIFERENCA PARA OS OUTROS TYPES É QUE 


ESTE __ TYPE __ NAO TEM 

""FAIL-SAFE AREA""....




--> OU SEJA,

ESSE TIPO DE TABLE TYPE É USADO 

SE _ TIVERMOS DATA QUE NAO PRECISA 
DE 

TANTA DATA PROTECTION...






--> POR EXEMPLO, SE ESTAMOS FALANDO DE TABLES IMENSAS,

E QUE 

NAO PRECISAM SER TAO DATA PROTECTED....





--> COM ISSO, VC CONSEGUE ECONOMIZAR...


--> MAS SE FOR DATA QUE 
VC 

PRECISA PROTEGER, ESSE TABLE TYPE NAO É BOM...







DEPOIS DESSES TYPES,

TEMOS 


O ""TEMPORARY TABLE TYPE"...









3) TEMPORARY 



--> SAO TABLES CRIADAS COM O COMANDO 
"CREATE TEMPORARY TABLE"...



--> TEMOS TIME TRAVEL RETENTION PERIOD....






-> MAS _ NAO __ TEMOS FAILSAFE AREA, EXATAMENTE 

COMO NAS TRANSIENT TABLES...


















--> AÍ VC PODE SE PERGUNTAR,


""" MAS QUAL É A DIFERENCA ENTRE 

TRANSIENT E TEMPORARY TABLES?""








--> A MAIN DIFFERENCE É QUE 


A 



"""TEMPORARY TABLE""" EXISTE/EXISTIRÁ 



___aPENAS___NA CURRENT SESSION DO USUÁRIO...









--> ISSO QUER DIZER QUE __OUTROS USERS NAO VERAO 
ESSA TABLE...








--> E ISSO QUER DIZER QUE SE __ FECHARMOS NOSSA 
SESSION (
    como a WORKSHEET
),


ESSA TABLE __ sERÁ DELETADA __ COMPLETAMENTE (

    E 

    O TIME TRAVEL RETENTION PERIOD DESSA TABLE TAMBÉM 
    SERÁ DELETADO...
)




--> E ESSA TABLE TAMBÉM SE TORNA UNRECOVERABLE,

DEPOIS QUE FECHAMOS A SESSION....










--> ISSO QUER DIZER QUE 
SE VAMOS REALIZAR ALGUMA TASK DE DEVELOPMENT/TESTS,


ESSE SERIA O TIPO DE TABLE USADO... (pq nao 

precisamos de protection para nossa data)















--> CONTRARIAMENTE À TABLE TYPE 


DE TEMPORARY,


AS TABLES DE TIPO TRANSIENT E PERMANENT 

VAO __ PERSISTIR_ ATÉ SEREM DROPPED...











--> OK... QUER DIZER QUE ELES VAO EXISTIR ATÉ 

OS DROPPARMOS...





-SÓ A TEMPORARY SERÁ DROPPADA QUANDO 

FECHARMOS A NOSSA SESSION...










MAS TAMBÉM TEMOS OUTRO DETALHE...




--> O TIME-TRAVEL RETENTION PERIOD,

PARA AS TABLES DE TIPO TRANSIENT E TEMPORARY,

O MÁXIMO É 

DE 
1 DIA, nao pode ser 


mudado para mais do que isso...


-------------------------------












hierarquia:









permanent > transient > temporary 










------------------------------------










-> também perceba que o TEMPO DE RETENCAO PARA 


AS TABLES 


TRANSIENT E TEMPORARY É APENAS 



CONFIGURÁVEL ATÉ 1 DIA, NO MÁXIMo (
    também podemos settar como 0, se quisermos...
)













--> ok.. esse é um overview desses table types...




---------------------------------






AGORA DEVEMOS ESTUDAR O PROPÓSITO DE CADA 1 DESSES TABLE TYPES...








1) TRANSIENT TABLE -->  É ÚTIL SE __ TIVERMOS _ DATA ESPECIALMENTE 

LARGA,

MAS 


DATA COM QUE NAO QUEREMOS GASTAR MT DINHEIRO.... QUEREMOS MANTER OS 

DATA STORAGE COSTS BAIXOS... NESSE TIPO DE TABLE,


NAO TEMOS 


TANTA DATA PROTECTION (
    por isso ___NAO TEMOS __ O FAILSAFE,

    E TEMOS TIME-TRAVEL DE ATÉ NO MAXIMO 1 DIA...
)








RESUMO: TABLE LARGA, DATA QUE NAO PRECISA SER TAO PROTEGIDA, REDUZIR CUSTOS..











2) TEMPORARY TABLE --> É USADO PARA ""NON-PERMANENT DATA"" --> É USADO PARA CASOS 
                                                                EM QUE ESTAMOS TRABALHANDO/DEVELOPING
                                                                EM UMA TABLE/DATABASE, CASO EM QUE 
                                                                VAMOS QUERER TER ESSA DATA DISPONÍVEL
                                                                APENAS DURANTE 1 SESSION... QUEREMOS 
                                                                QUE ESSA DATA SEJA DELETADA, DEPOIS 
                                                                DE FECHARMOS A SESSION..






3) PERMANENT --> É O TIPO COMMON... DEVE SER USADA SE ESTAMOS TRABALHANDO COM PRODUCTION 
                                                                        DATA, ETC...













OK... ESSES SAO OS 3 TABLE TYPES...










--> ELES EXISTEM JUSTAMENTE PARA FAZERMOS MELHOR MANAGE DO STORAGE COST....








--> ISSO PQ __ AS ""TRANSIENT"" E ""TEMPORARY"" TABLES USAM MENOS STORAGE,
    JUSTAMENTE PQ __ ELES NAO TEM FAILSAFE, E PQ POSSUEM MENOS TIME TRAVEL,

    E TBM PQ SAO ""DROPPED QUANDO A SESSION ACABA"" (quando falamos de temporary tables)..







--------------------------------------------















AGORA, PARA ACABAR ESTE TÓPICO:











TYPES DIFERENTES EXISTEM NAO SÓ PARA TABLES,






MAS TAMBÉM PARA OUTROS OBJECTS (

    DATABASES, SCHEMAS, ETC...
)










--> O MAIS COMUM É DEFINIRMOS ESSES TYPES ESPECIAIS EM TABLES 
(
    transient, temporary
),


MAS É CLARO QUE TAMBÉM PODEMOS USAR ESSES TYPES COM DATABASES,


COM SCHEMA, ETC..








--> O DETALHE IMPORTANTE É QUE 



""""SE CRIAMOS 1 OBJECT COMO DATABASE/SCHEMA, TODOS 

OS OBJECTS NESTEADOS (SCHEMAS/TABLES) TAMBÉM SERÃO DAQUELE 
TYPE ORIGINÁRIO"""""




EX:

CRIEI 1 TEMPORARY SCHEMA --> TODAS AS TABLES CRIADAS DENTRO DESSE SCHEMA TAMBÉM SERAO 
                            TEMPORARY...













--> OUTRO DETALHE IMPORTANTE --> SE CRIAMOS 1 ""TEMPORARY TABLE""  COM MESMO 
                                    NOME DE OUTRA TABLE PERMANENT QUE JÁ EXISTE,
                                    NAO EXISTIRÁ CONFLITO ENTRE AS 2 TABLES...


                                


--> QUER DIZER QUE __ SE CRIAMOS __ 1 TEMPORARY TABLE _ EM CIMA __ 

DE 1 PERMANENT TABLE, QUE JÁ EXISTE, 

O QUE __ VAI ACONTECER É QUE 



ESSA 


""""PERMANENT TABLE"""" VAI SER ___ EFETIVAMENTE """"""HIDDEN""""",


DURANTE NOSSA SESSION (

    o que pode ser útil...
) --------> 







QUER DIZER QUE SE CRIAMOS 1 TEMPORARY TABLE, COM O NOME EMPLOYEE, 


APENAS 
NOSSA TEMPORARY TABLE FICARÁ VISÍVEL, NA NOSSA ACCOUNT, DURANTE AQUELA SESSION...





QUER DIZER QUE TODAS AS QUERIES E TRANSFORMATIONS QUE RODARMOS NESSA TABLE

AFETARAO APENAS NOSSA _ TEMPORARY TABLE...










ok... chega da teoria, hora de ter um hands-on....