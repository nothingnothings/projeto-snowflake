












NESSA SECTION, FALAREMOS SOBRE MATERIALIZED VIEWS...











PARA AS COMPREENDER, DEVEMOS 

IMAGINAR O SEGUINTE CENÁRIO:


















1) DIGAMOS QUE TEMOS 1 VIEW QUE É FREQUENTEMENTE 
QUERIADA, E QUE 
TOMA 1 LONGO TEMPO PARA SER PROCESSADA...



--> ISSO PODE LEVAR A UMA USER EXPERIENCE MT RUIM 
(talvez o caso da empresa....)




-->  TAMBÉM PODEMOS TER COMPUTE COSTS MAIS 
ELEVADOS, SE TIVERMOS 

ESSA QUERY MT TIME-INTENSE E COST-INTENSE, QUE 

TEMOS QUE RODAR COM MT FREQUENCIA...


















--> A SOLUCAO PARA ISSO É UMA 

""MATERIALIZED VIEW""....









--> QUER DIZER QUE _PODEMOS CRIAR 


1 STATEMENT/VIEW,




E
 AÍ __ SALVAR O __ rESULTADO__ 



 DESSA QUERY NAQUILO QUE 


 CHAMAMOS 


 DE 1 "MATERIALIZED VIEW"...








 --> isso quer dizer que 


 O RESULT SET 


 DO __ SELECT STATEMENT QUE


 USAMOS 




 SERÁ __ ARMAZENADO EM 1 TABLE À PARTE...












 ----> E ESSA TABLE SERÁ, COMO 1 VIEW,


 EXATAMENTE COMO 1 VIEW, O QUE QUER DIZER QUE 



 __SEMPRE CONTERÁ __a DATA MAIS ATUALIZADA....











 --> QUER DIZER QUE SEMPRE QUE 


 ALGO FOR ALTERADO 


 NA BASE TABLE, ESSA CHANGE TAMBÉM 

 

 SERÁ AUTOMATICAMENTE REFLETIDA 



 NESSA VIEW...











 RESUMO: ""RESULTS WILL BE STORED IN 
 A SEPARATE TABLE, AND THIS TABLE WILL BE 
 UPDATED AUTOMATICALLLY, BASED ON THE ORIGINAL
 TABLE""...














quer dizer que MATERIALIZED VIEWS COMBINAM AS VANTAGENS 
DE:




1) TABLES; A VELOCIDADE 

DE TABLES, COM O STATEMENT DE "SELECT" NORMAL ....





2) A UPDATED DATA, DE 1 QUERY,

QUE ESPERAMOS EM 1 VIEW...








ESSES 2 COMPONENTS SE JUNTAM NESSA 

"MATERIALIZED VIEW",




QUE 


__ É UMA VIEW UPDATADA AUTOMATICAMENTE 


por __ um "AUTOMATED UPDATE SERVICE"

RODADO PELO SNOWFLAKE (

    ou seja, é MANAGEADO PELO SNOWFLAKE...
)



 







OK... ISSO É UM OVERVIEW DO QUE É UMA MATERIALIZED 

VIEW....








AGORA DEVEMOS VER ISSO EM PRÁTICA,


VER COMO PODEMOS CRIAR 1 MATERIALIZED VIEW,



E VER COMO FUNCIONAM NA PRÁTICA...


