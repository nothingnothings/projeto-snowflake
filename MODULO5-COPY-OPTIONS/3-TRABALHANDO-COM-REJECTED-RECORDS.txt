






AGORA QUE VIMOS O VALIDATION_MODE E SEUS USE-CASES,





QUEREMOS __ VER TAMBÉM 


UNS METHODS MAIS AVANCADOS 

DE _ TRABALHAR COM __ 


OS ERROR RESULTS....











-> OK... QUER DIZER, 
DEPOIS DE OS ERRORS TEREM ACONTECIDO, EM 1 COMANDO DE COPY,



AINDA _ QUEREMOS SER CAPAZES DE ___PROCESSAR _ ESSES ROWS 
QUE 

CAUSARAM ALGUNS ERRORS...







-> PRIMEIRAMENTE, O PROFESSOR QUER CRIAR UMA NOVA TABLE PARA ISSO..








--> POR ISSO ELE ESCREVE:






-- WORKING WITH ERROR RESULTS (with rows that errored out)

-- 1) SAVING REJECTED _ FILES __ AFTER _ VALIDATION MODE__...

CREATE OR REPLACE TABLE COPY_DB.PUBLIC.ORDERS (
ORDER_ID VARCHAR(30),
AMOUNT VARCHAR(30),
PROFIT INT,
QUANTITY INT,
CATEGORY VARCHAR(30),
SUBCATEGORY VARCHAR(30)
);
















-> OK... VAMOS QUERER SALVAR ESSAS REJECTED FILES, 

DEPOIS DO VALIDATON MODE, SE FOREM RECUSADAS...







EX:







-- WORKING WITH ERROR RESULTS (with rows that errored out)

-- 1) SAVING REJECTED _ FILES __ AFTER _ VALIDATION MODE__...

CREATE OR REPLACE TABLE COPY_DB.PUBLIC.ORDERS (
ORDER_ID VARCHAR(30),
AMOUNT VARCHAR(30),
PROFIT INT,
QUANTITY INT,
CATEGORY VARCHAR(30),
SUBCATEGORY VARCHAR(30)
);


//isso vai ERROR OUT
COPY INTO COPY_DB.PUBLIC.ORDERS
    FROM @aws_stage_copy
    FILE_FORMAT=(
    type=csv,
    field_delimiter=',',
    skip_header=1
    )
    pattern='.*Order.*'
    VALIDATION_MODE=RETURN_ERRORS;














queremos """validate"" o tipo de errors que 

acontecerem quando rodarmos esse comando de copy...















------> antes disso, percebo que meu stage está ERRADO...





ESTOU USANDO 1 STAGE ERRADO... TENHO QUE ALTERAR ESSE STAGE, PARA QUE 
ELE FIQUE COM A URL CERTA...







FACO ISSO COM 



ALTER STAGE <stage_name>
SET url='xxx';









OK... O CÓDIGO VAI FICANDO ASSIM:





-- WORKING WITH ERROR RESULTS (with rows that errored out)

-- 1) SAVING REJECTED _ FILES __ AFTER _ VALIDATION MODE__...

CREATE OR REPLACE TABLE COPY_DB.PUBLIC.ORDERS (
ORDER_ID VARCHAR(30),
AMOUNT VARCHAR(30),
PROFIT INT,
QUANTITY INT,
CATEGORY VARCHAR(30),
SUBCATEGORY VARCHAR(30)
);


//isso vai ERROR OUT
COPY INTO COPY_DB.PUBLIC.ORDERS
    FROM @OUR_FIRST_DB.PUBLIC.AWS_STAGE
    FILE_FORMAT=(
    type=csv
    field_delimiter=','
    skip_header=1
    )
    pattern='.*Order.*'
    VALIDATION_MODE=RETURN_ERRORS;




ALTER STAGE OUR_FIRST_DB.PUBLIC.aws_stage
    SET url='s3://snowflakebucket-copyoption/returnfailed/';

    

SELECT * FROM COPY_DB.PUBLIC.ORDERS;

















rodamos isso, e entao ficamos com 4 errors...







OS 4 ERRORS SAO:




Numeric value 'one thousand' is not recognized


Numeric value 'two hundred twenty' is not recognized


Numeric value '7-' is not recognized

Numeric value '3a' is not recognized













ok... pq provavelmente precisamos de INTS, nesse field...










MAS O QUE ENXERGAMOS, SE SCROLLAMOS BEM PARA A DIREITA,




É UMA COLUMN COM ""REJECTED_RECORDS"",

tipo assim:





REJECTED_RECORD

B-25601,1275,one thousand,7,Furniture,Bookcases 
B-25601,66,two hundred twenty,5,Clothing,Stole 
B-30601,1275,10,7-,Furniture,Bookcases 
B-30601,8,-244,3a,Clothing,Hankerchief 











ou seja, é a data de todas as columns 

que deram erro...










e, agora, 

depois de termos carregado essa data/nao carregado 

e apenas visto os errors,





PODEMOS FAZER UMA GAMBIARRA.....











-> A GAMBIARRA É ESTA:








//STORING REJECTED/FAILED RESULTS IN A TABLE (another table) 

CREATE OR REPLACE TABLE rejected AS 
SELECT * FROM table(result_scan(last_query_id()));












AS GAMBIARRAS SAO:


1)  a function ""RESULT_SCAN()"" --> É UMA
 FUNCTION PROVIDENCIADA PELO SNOWFLAKE, 
 QUE NOS DEIXA __ PEGAR ALGUNS DOS RESULTS 
 QUE TENHAM OCORRIDO NAS ÚLTIMAS 24 HORAS.... ----> E ESSA FUNCTION PRECISA _DE 1 ID __ PARA ___ENCONTRAR__ 1 RESULT, ENCONTRA 1 RESULT, COM BASE EM 1 ID DE ALGUMA QUERY...


tipo 

result_scan(123123sada)



2) a function ""table()"" -> essa function CRIA 1 TABLE, A PARTIR DE 1 RESULT SET...





3) a function ""last_query_id()""" --> ISSO NOS DÁ __ O EXATO ID _ DA ÚLTIMA QUERY 
QUE FOI RODADA... 

--> e é por isso que rodamos 


        result_scan(last_query_id()),



        DE FORMA NESTEADA, pq 


        QUEREMOS _ PEGAR OS RESULTADOS (result set) DESSA QUERY, IDENTIFICADA 
        POR MEIO DESSE ID...


















E É CLARO QUE VAMOS QUERER PEGAR APENAS A COLUMN DE ""REJECTED_rECORDS"",


que tem 

as entries que errored out:





-- SUPER GAMBIARRA - STORING REJECTED/FAILED RESULTS IN A TABLE (another table) - NOS DEIXA ARMAZENAR OS FAILED RECORDS DA QUERY ANTERIOR _ EM UMA TABLE _ ADICIONAL....
-- vamos pegar __aPENAS__ A COLUMN DE ""rejected_records"" DA ÚLTIMA QUERY QUE FOI EXECUTADA (a de cima)...
CREATE OR REPLACE TABLE rejected AS 
SELECT rejected_record FROM table(result_scan(last_query_id())); ---usamos a ""TABLE()"" FUNCTION..
-- usamos também a function ""RESULT_SCAN()"" --> É UMA FUNCTION PROVIDENCIADA PELO SNOWFLAKE, QUE NOS DEIXA __ PEGAR ALGUNS DOS RESULTS QUE TENHAM OCORRIDO NAS ÚLTIMAS 24 HORAS....










EX:






-- com isso, conseguimos 1 table, de nome ""rejected", com 1 column, de nome ""rejected_record""...





e essa column ficará preenchida..




--> MAIS TARDE,


VEREMOS COMO PODEMOS 
PROCESSAR 

AINDA MAIS 


ESSA TABLE QUE PRODUZIMOS AGORA...








CERTO...



MAS TUDO ISSO FUNCIONOU, ISSO É BOM....








A TABLE DE ""REJECTED"" é criada a partir desse result..









--> OUTRA GAMBIARRA BOA:






MAIS TARDE, QUANDO TIVERMOS MAIS ERRORS,



SEMPRE PODEMOS ADICIONAR __ MAIS RECORDS __ NESSA TABLE DE 

""REJECTED"",


basta rodar 

este statement:





-- ADDING ADDITIONAL EVENTUAL FAILED RECORDS TO REJECTED TABLE --

INSERT INTO rejected
SELECT rejected_record from table(result_scan(last_query_id()));

SELECT * FROM REJECTED;








O CÓDIGO INTEIRO VAI FICANDO ASSIM:













ALTER STAGE OUR_FIRST_DB.PUBLIC.aws_stage
    SET url='s3://snowflakebucket-copyoption/returnfailed/'; //stage com ERRORS nos arquivos


-- WORKING WITH ERROR RESULTS (with rows that errored out)

-- 1) SAVING REJECTED _ FILES __ AFTER _ VALIDATION MODE__...

CREATE OR REPLACE TABLE COPY_DB.PUBLIC.ORDERS (
ORDER_ID VARCHAR(30),
AMOUNT VARCHAR(30),
PROFIT INT,
QUANTITY INT,
CATEGORY VARCHAR(30),
SUBCATEGORY VARCHAR(30)
);


//isso vai ERROR OUT
COPY INTO COPY_DB.PUBLIC.ORDERS
    FROM @OUR_FIRST_DB.PUBLIC.AWS_STAGE
    FILE_FORMAT=(
    type=csv
    field_delimiter=','
    skip_header=1
    )
    pattern='.*Order.*'
    VALIDATION_MODE=RETURN_ERRORS;


-- TRUNCATE COPY_DB.PUBLIC.ORDERS;

-- SUPER GAMBIARRA - STORING REJECTED/FAILED RESULTS IN A TABLE (another table) - NOS DEIXA ARMAZENAR OS FAILED RECORDS DA QUERY ANTERIOR _ EM UMA TABLE _ ADICIONAL....
-- vamos pegar todos os values DA ÚLTIMA QUERY QUE FOI EXECUTADA (a de cima)...
-- CREATE OR REPLACE TABLE rejected AS 
-- SELECT * FROM table(result_scan(last_query_id())); ---usamos a ""TABLE()"" FUNCTION..
-- usamos também a function ""RESULT_SCAN()"" --> É UMA FUNCTION PROVIDENCIADA PELO SNOWFLAKE, QUE NOS DEIXA __ PEGAR ALGUNS DOS RESULTS QUE TENHAM OCORRIDO NAS ÚLTIMAS 24 HORAS....





-- SUPER GAMBIARRA - STORING REJECTED/FAILED RESULTS IN A TABLE (another table) - NOS DEIXA ARMAZENAR OS FAILED RECORDS DA QUERY ANTERIOR _ EM UMA TABLE _ ADICIONAL....
-- vamos pegar __aPENAS__ A COLUMN DE ""rejected_records"" DA ÚLTIMA QUERY QUE FOI EXECUTADA (a de cima)...
CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.rejected AS 
SELECT rejected_record FROM table(result_scan(last_query_id())); ---usamos a ""TABLE()"" FUNCTION..
-- usamos também a function ""RESULT_SCAN()"" --> É UMA FUNCTION PROVIDENCIADA PELO SNOWFLAKE, QUE NOS DEIXA __ PEGAR ALGUNS DOS RESULTS QUE TENHAM OCORRIDO NAS ÚLTIMAS 24 HORAS....



SELECT * FROM OUR_FIRST_DB.PUBLIC.rejected;




-- AS GAMBIARRAS SAO:


-- 1)  a function ""RESULT_SCAN()"" --> É UMA
--  FUNCTION PROVIDENCIADA PELO SNOWFLAKE, 
--  QUE NOS DEIXA __ PEGAR ALGUNS DOS RESULTS 
--  QUE TENHAM OCORRIDO NAS ÚLTIMAS 24 HORAS.... ----> E ESSA FUNCTION PRECISA _DE 1 ID __ PARA ___ENCONTRAR__ 1 RESULT, ENCONTRA 1 RESULT, COM BASE EM 1 ID DE ALGUMA QUERY...


-- tipo 

-- result_scan(123123sada)



-- 2) a function ""table()"" -> essa function CRIA 1 TABLE, a partir de 1 result set...





-- 3) a function ""last_query_id()""" --> ISSO NOS DÁ __ O EXATO ID _ DA ÚLTIMA QUERY 
-- QUE FOI RODADA... 

-- --> e é por isso que rodamos 


--         result_scan(last_query_id()),



--         DE FORMA NESTEADA, pq 


--         QUEREMOS _ PEGAR OS RESULTADOS DESSA QUERY, IDENTIFICADA 
--         POR MEIO DESSE ID...


SELECT * FROM COPY_DB.PUBLIC.ORDERS;










--> OUTRA GAMBIARRA BOA:


-- MAIS TARDE, QUANDO TIVERMOS MAIS ERRORS,



-- SEMPRE PODEMOS ADICIONAR __ MAIS RECORDS __ NESSA TABLE DE 

-- ""REJECTED"",


-- basta rodar 

-- este statement:


-- se quisermos adicionar EVENTUAIS RECORDS DE ERRO ADICIONAIS NA TABLE DE REJECTED, TEMOS:



-- //////ADDING ADDITIONAL EVENTUAL FAILED RECORDS TO REJECTED TABLE --

INSERT INTO rejected
SELECT rejected_record from table(result_scan(last_query_id()));

SELECT * FROM REJECTED;









-----------------------------








CERTO....




EX:







-- /ADDING ADDITIONAL EVENTUAL FAILED RECORDS TO REJECTED TABLE --

INSERT INTO rejected
SELECT rejected_record from table(result_scan(last_query_id())); -- pegamos os ""rows that errored out"" da última query que foi executada...

SELECT * FROM REJECTED;



--------------------------------











--> CERTO... ANTES DE ESTUDARMOS 

MANEIRAS DE PROCESSAR ESSES 


""REJECTED_RECORD"" 

AINDA MAIS,



O PROFESSOR QUER MOSTRAR 1 METHOD ALTERNATIVO 



DE RETRIEVAL DE """REJECTED FILES/ENTRIES""... -----> NO CASO ,







É O METHOD 2, DE RETRIEVAR ESSAS ENTRIES ___ SEM O __ VALIDATION MODE___...








temos:




------ 2) SAVING REJECTED FILES/ENTRIES __WITHOUT _ VALIDATION MODE ----























PARA CONSEGUIR FAZER ESSE RETRIEVAL,

USAREMOS O 


""ON_ERROR=CONTINUE"""...





ex:







COPY INTO COPY_DB.PUBLIC.ORDERS
    FROM @aws_stage_copy
    FILE_FORMAT = (
        type=csv, 
        field_delimiter= ',',
        skip_header=1
        )
    PATTERN='.*Order.*'
    ON_ERROR=CONTINUE;














certo...





RODAMOS ISSO AÍ...









--> COM ISSO, ALGUMAS ENTRIES DEVEM TER SIDO COPIADAS 

NA NOSSA TABLE,

E OUTRAS 

NAO...





4 entries nao foram copiadas...





4 entries, 2 de cada arquivo....














--> o problema, quando usamos a option de 

""continue"",

é que 

nao é possível visualizar 


os errors que recebemos, inicialmente..








--> queremos ver ESPECIFICAMENTE OS ERRORS....












--> PARA ISSO, PODEMOS 

""""VALIDATE()"""""


COMANDOS DE COPY ANTERIORES,

E AÍ 




__ MOSTRAR _ ERRORS _ QUE OCORRERAM 

NESSES COPY COMMANDS ANTERIORES...











PARA ISSO, ESCREVEMOS:







SELECT * FROM TABLE(validate(orders, job_id => '_last'));











-- validate ---> Validates
--  the files loaded in
--   a past execution of the COPY INTO command
--    and returns all the errors
--     encountered during the load, rather than just the first error






ESSA FUNCTION 


__vALIDA__ AS FILES __ 


__cARREGADAS_ DENTRO __ 



DE 


1 COMANDO 

DE ""COPY INTO"" RODADO ANTERIORMENTE...






