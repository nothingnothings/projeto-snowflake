
OK... AGORA DEVEMOS VER COMO PODEMOS CRIAR E USAR DATA MASKING POLICIES...





TAMBÉM DEVEMOS VER COMO PODEMOS APLICAR ESSAS DATA MASKS EM COLUMNS...






--> PARA ISSO, COMECAMOS COM O ROLE DE ACCOUNTADMIN...








-> DEPOIS ESCREVEMOS ASSIM:






USE DEMO_DB;

USE ROLE ACCOUNTADMIN;


-- Prepare table -- 
CREATE OR REPLACE TABLE CUSTOMERS (
    ID number,
    FULL_NAME varchar,
    email VARCHAR,
    PHONE VARCHAR,
    SPENT NUMBER,
    CREATE_DATE DATE DEFAULT CURRENT_DATE
);




-- Insert values in table -- 
INSERT INTO CUSTOMERS (ID, FULL_NAME, EMAIL, PHONE, SPENT) 
VALUES 
  (1,'Lewiss MacDwyer','lmacdwyer0@un.org','262-665-9168',140),
  (2,'Ty Pettingall','tpettingall1@mayoclinic.com','734-987-7120',254),
  (3,'Marlee Spadazzi','mspadazzi2@txnews.com','867-946-3659',120),
  (4,'Heywood Tearney','htearney3@patch.com','563-853-8192',1230),
  (5,'Odilia Seti','oseti4@globo.com','730-451-8637',143),
  (6,'Meggie Washtell','mwashtell5@rediff.com','568-896-6138',600);



---------------------------------------






OK...




DEPOIS DE PREENCHER ESSA TABLE COM DATA,




PRESUMIMOS QUE ESSE CONJUNTO DE DATA É SENSITIVE DATA..







TEMOS ESSA DATA NA NOSSA DATABASE....





ESSA DATA NAO DEVE SER 


VISÍVEL A ALGUNS DE NOSSOS USERS 


(no caso, visível a alguns de nossos ROLES, que por sua 

vez sao atribuídos aos nossos users)...











--------> É POR ISSO QUE QUEREMOS CRIAR 1 


DYNAMIC DATA MASKING POLICY,


PARA PROTEGER ESSA DATA...








--> VAMOS COLOCAR ESSA POLICY EM CIMA DE NOSSAS COLUMNS...







-> ANTES TESTAREMOS TUDO ISSO, 


COM 2 NOVOS ROLES:





CREATE OR REPLACE ROLE ANALYST_MASKED;
CREATE OR REPLACE ROLE ANALYST_FULL;








ISSO FEITO,
 

 VAMOS FAZER GRANT DE PRIVILEGES A ESSES ROLES,

 PARA QUE 

 ELES CONSIGAM FAZER 

 QUERY NA TABLE DE "customers",

 TIPO ASSIM:








 -- Grant select on table to roles -- 
GRANT SELECT ON TABLE DEMO_DB.PUBLIC.CUSTOMERS TO ROLE ANALYST_MASKED;
GRANT SELECT ON TABLE DEMO_DB.PUBLIC.CUSTOMERS TO ROLE ANALYST_FULL;








-- GRANT ALL PRIVILEGES ON DATABASE DEMO_DB TO ROLE ANALYST_FULL;
-- GRANT ALL PRIVILEGES ON DATABASE DEMO_DB TO ROLE ANALYST_MASKED;




--> CERTO...







TEMOS ESSES 2 ROLES, COM ESSES PRIVILEGES DE ACESSO...











--> MAS 
ESSES ROLES, CADA 1 DELES TERÁ UMA DIFERENTE "poLICY", 

"ACCESS POLICY", ASSIGNADA A SI...















OK... MAS ISSO É O PRIVILEGE DE ACESSO APENAS 


NA TABLE, 


PRECISAMOS DE ACESSO NA SCHEMA TAMBÉM, POR SISO RODAMOS:





-- Grant access to schema to roles --
GRANT USAGE ON SCHEMA DEMO_DB.PUBLIC TO ROLE ANALYST_MASKED;
GRANT USAGE ON SCHEMA DEMO_DB.PUBLIC TO ROLE ANALYST_FULL;

GRANT USAGE ON DATABASE DEMO_DB TO ROLE ANALYST_MASKED;
GRANT USAGE ON DATABASE DEMO_DB TO ROLE ANALYST_FULL;




-- Grant warehouse access to roles --
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE ANALYST_MASKED;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE ANALYST_FULL;









CERTO, AGORA ELES TEM TODOS OS PRIVILEGES 




E SELECTS PARA 



USAREM ESSA DATABASE, ESSE SCHEMA, E ESSA TABLE,

E RODAR 

ESSES SELECTS...










--> AGORA APENAS NOS RESTA ATRIBUIR 

ESSES ROLES A ALGUM DE NOSSOS USERS... --> VAMOS ASSIGNAR 
ESSES 



ROLES QUE CRIAMOS __ AO __ _NOSSO MAIN USER (que tem 

o role de accountadmin)..







FAZEMOS ISSO COM ESTE COMANDO:





-- Grant roles to a user --
GRANT ROLE ANALYST_MASKED TO USER NOTHINGNOTHINGS;
GRANT ROLE ANALYST_FULL TO USER NOTHINGNOTHINGS;










--> ISSO FEITO, FINALMENTE PODEMOS SETTAR A MASKING POLICY 

PARA 1 DE NOSSOS ROLES:



CREATE OR REPLACE MASKING POLICY PHONE_POLICY
    AS (VAL VARCHAR) RETURNS VARCHAR ->
        CASE
            WHEN CURRENT_ROLE() IN ('ANALYST_FULL', 'ACCOUNTADMIN') THEN VAL
            ELSE '##-###-##'
            END;



-----------------------









DEPOIS DE "AS",


SETTAMOS A DEFINICAO PARA 


ESSA POLICY....






A PRIMEIRA COISA QUE ESCREVEMOS 

É 

""o DATA TYPE DA COLUMN ORIGINAL""

(
    no caso,

    colocamos 
    "val varchar",

    pq esse é o data type da column 
    de phone....
)




DEPOIS DISSO,




ESCREVEMOS "returns"



E ENTAO ESCREVEMOS O DATA TYPE 


DA __ "RETURNING COLUMN"...












O ESTRANHO É QUE O DATA TYPE 

DA "ORIGINAL COLUMN"


TEM QUE __ SER EXATAMENTE 


O MESMO 


VALUE DA RETURNING COLUMN (
    nao podemos definir a colum original 

    como STRING e entao retornar um int,
    por exemplo....
)






POR ISSO VAI FICANDO ASSIM:




CREATE OR REPLACE MASKING POLICY PHONE_POLICY
    AS (VAL VARCHAR) RETURNS VARCHAR -> 








TEMOS AQUELA SETA ALI,



E DENTRO DELA 



ESCREVEMOS 


CASES 

PARA A "CENSURA"...











NO CASO,

FICAMOS COM UM 


CASE DE 





CASE 
WHEN current_role() IN ('ANALYST_FULL', 'ACCOUNTADMIN') THEN VAL 











--> QUER DIZER QUE """SE O CURRENT_ROLE FOR OU DE ACCOUNTADMIN

OU DE ANALYST_FULL, COMO ESSE ARRAY, QUEREMOS 

RETORNAR O PLAIN VALUE, A COLUMN ORIGINAL""... CASO 
CONTRÁRIO,



GOSTARÍAMOS QUE OS VALUES DESSA COLUMN 

FICASSEM COMO 
"###-###-###"...






CERTO...VAMOS EM FRENTE E CRIAMOS ESSA POLCY..





--------------------------------









NÓS JÁ CRIAMOS ESSA POLICY,

SIM,



__ MAS AINDA NAO A APLICAMOS 



EM NENHUMA COLUMN ESPECÍFICA..






O APPLY DE MASKING POLICIES 


EM COLUNAS É UM PROCESSO SEPARADO DA SUA 

CRIACAO...









--> PARA APLICAR UMA MASKING POLICY

EM 1 COLUMN ESPECÍFICA,




ESCREVEMOS ASSIM:




-- set/apply MASKING POLICY ON A SPECIFIC COLUMN -- 
ALTER TABLE IF EXISTS CUSTOMERS MODIFY COLUMN PHONE 
    SET MASKING POLICY PHONE_POLICY;




USE ROLE ANALYST_MASKED;


SELECT * FROM DEMO_DB.PUBLIC.CUSTOMERS;









OK.. FUNCIONOU.








APENAS O ROLE DE ANALYST_MASKED





ENXERGA OS PHONES COM A COLUMN OCULta...







OK... ESSE É O BASIC SETUP, E COMO 
PODEMOS CRIAR 

ESSA POLICY E A APLICAR EM 1 GIVEN TABLE...







--> MAS AGORA QUEREMOS VER COMO PODEMOS 

MUDAR ESSA POLICY,

COMO PODEMOS A MANAGEAR,



E __ COMO _ PODEMOS SETUPPAR 
ESSA 

POLICY PARA USE-CASES 

ESPECÍFICOS.