







AGORA QUE CONSEGUIMOS FAZER LOAD DA RAW DATA NA NOSSA 

TABLE,
NA TABLE DE 

NOME 

""JSON_RAW"",




POR MEIO DESTE CÓDIGO:








------- FIRST STEP - LOAD RAW JSON 


-- CREATE STAGE
CREATE OR REPLACE STAGE MANAGE_DB.EXTERNAL_STAGES.JSONSTAGE
    url='s3://bucketsnowflake-jsondemo';

-- CREATE FILE FORMAT
CREATE OR REPLACE FILE FORMAT MANAGE_DB.FILE_FORMATS.JSONFORMAT
    TYPE=JSON; //precisamos, pois o default, csv, nao adiantará

-- CREATE TABLE 
CREATE OR REPLACE TABLE OUR_FIRST_DB.PUBLIC.JSON_RAW (
    raw_file VARIANT //DATA TYPE EXTREMAMENTE ESPECIAL (é misto)
)



-- ESSA TABLE __ TERÁ APENAS _ 1 ÚNICA COLUMN,
-- E SEU DATA TYPE 
-- SERÁ DO TIPO __ """"VARIANT""""....



-- -> essa column terá 1 nome de ""raw_file"", nesse exemplo...




-------- SECOND STEP - COPY RAW JSON DATA INTO SINGLE COLUMN, IN JSON_RAW table...


-- COPY RAW JSON DATA
COPY INTO OUR_FIRST_DB.PUBLIC.JSON_RAW
    FROM @MANAGE_DB.EXTERNAL_STAGES.JSONSTAGE
    FILE_FORMAT=(
        FORMAT_NAME=MANAGE_DB.FILE_FORMATS.JSONFORMAT
    )
    files=('HR_data.json');

-- CHECK VARIANT DATA TYPE COLUMN's appearance. 
SELECT * FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;



























AGORA QUE FIZEMOS ISSO,










__ QUEREMOS:






1) CRIAR COLUMNS PARA CADA 1 DOS FIELDS DESEJADOS...






2) PASSAR ESSE FORMATO ""JSON"" EM COLUMNS,


PARA QUE POSSAMOS TRABALHAR COM ELE, COM FACILIDADE...














ISSO PQ _ 



O JSON DATA, NA SUA FORMA PURA,


NAO É ALGO COM QUE PODEMOS TRABALHAR, 



NO SQL...















--> MAS O SNOWFLAKE POSSUI 






ALGUMAS OPTIONS MT BOAS, 
PARA 
FAZER O PARSE DESSA DATA JSON...













ok.... assumamos que 




__ QUEREMOS __ QUERIAR_  APENAS _ A city




DE CADA ROW....











-- MAS COMO PODERÍAMOS FAZER ISSO, SEM TER DE CRIAR OUTRA TABLE 

COM ESSAS INFOS?









--> PARA ISSO,



DEVEMOS 





ESCREVER:



//THIRD STEP: PARSE AND ANALYZE RAW JSON...


SELECT RAW_FILE:city FROM OUR_FIRST_DB.PUBLIC.JSON_RAW; ////EIS O CÓDIGO EM QUESTAO

























"""RAW_FILE"" --> É O NOME DE NOSSA COLUNA... 




"":city"" --> É UMA __ KEY__, DENTRO DESSA COLUMN, COLUMN DE DATA TYPE ""VARIANT""...





-----------------------------------------











OK... É ASSIM QUE PODEMOS ACESSAR KEYS E SEUS VALUES,


DENTRO DE COLUMNS DE TIPO ""VARIANT"",



no snowflake...










AQUI TEMOS OUTRO EXEMPLO:


SELECT $1:first_name FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;


















É BEM FÁCIL, NA VERDADE..


APENAS PRECISAMOS 


DA ESTRUTURA 






""COLUMN_NAME:KEY-TO-BE-ACESSED-IN-THE-COLUMN""

















--> ok.... 











-> E ISSO JÁ NOS DÁ EXATAMENTE O QUE QUERÍAMOS...








-> ESSE É UM PRIMEIRO PASSO MT BOM...










-> OUTRA ALTERNATIVA É AQUELA VISTA LOGO ACIMA:




SELECT $1:first_name FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;
















AGORA QUE CONSEGUIMOS ___ PARSEAR__ ESSA DATA,





DEVEMOS TENTAR __ FORMATAR ISSO DE UMA MANEIRA MAIS NICE...



ISSO PQ __ O 



COLUMN_NAME 


DE 


$1:FIRST_NAME 


NAO FICOU LEGAL...



SERIA MAIS LEGAL COLOCAR 1 NOME DIFERENTE, 


EM VEZ DE 

""$1:FIRST_NAME""...





TAMBÉM SERIA MELHOR 




SE CONSEGUÍSSEMOS 





__CONVERTER _ 




OS VALUES QUE FORAM EXTRAÍDOS,


PQ ATUALMENTE 




ELES ESTAO COM 1 


FORMATO 





"Mina"


"Doug"


"Charlie",



ETC...






--> QUEREMOS TIRAR ESSES "", 

e 

fazer com que sejam retornados 


COMO DATA TYPE __ STRING..









--> PARA ISSO, O PROFESSOR ESCREVE:








//SELECT attribute/column by key-name -- FORMATTED RESULTS



SELECT RAW_FILE:first_name::string as first_name ///eis o código em questao.
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;




COM ESSA ESCRITA,


DE ""RAW_FILE:firstname::string",


CONSEGUIMOS 



CONVERTER ESSE VALUE,


CONVERTER A 1 DATA TYPE DE ___ STRING__ (em vez de variant)..


depois, por meio de 
""as first_name"",

CONSEGUIMOS RENOMEAR O NOME DA COLUMN QUE VAI APARECER NO RESULT_SET,

PARA ""first_name"" (em vez de $1:first_name)...


FICA TIPO ASSIM:





SELECT RAW_FILE:first_name::string as first_name FROM 
OUR_FIRST_DB.PUBLIC.JSON_RAW;

















quer dizer que o uso de 

""::""


SERVE PARA _CONVERTER DATA TYPES...





-------------------------------------













O PROFESSOR TEM MAIS COMANDOS,




TIPO ESTE:







SELECT RAW_FILE:id::INT as ID FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;




















OK.... ISSO REALMENTE REALIZOU A CONVERSAO PARA 1 INT NUMBER,

COM QUE PODEMOS TRABALHAR...












ESSA É A SEGUNDA ETAPA CRUCIAL 



__ PARA __ CONSEGUIRMOS ORGANIZE,

TRANSFORM 


E WORK COM ESSA JSON DATA..











--> AGORA, SE COMBINARMOS TUDO ISSO,


PODEREMOS CRIAR 1 TABLE/RESULT SET BEM LEGAL...






TIPO ASSIM:






SELECT
    RAW_FILE:id::int as ID,
    RAW_FILE:first_name::STRING as first_name,
    RAW_FILE:last_name::STRING as last_name,
    RAW_FILE:gender::STRING as gender
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;








SE QUISÉSSEMOS CRIAR 1 NOVA TABLE COM ESSE RESULT SET,
ESCREVERÍAMOS ASSIM:






CREATE TABLE new_table_name AS
SELECT
    RAW_FILE:id::int as ID,
    RAW_FILE:first_name::STRING as first_name,
    RAW_FILE:last_name::STRING as last_name,
    RAW_FILE:gender::STRING as gender
FROM OUR_FIRST_DB.PUBLIC.JSON_RAW;





CERTO....
 





ISSO NOS DEU UMA TABLE PADRAO,



UM RESULT SET PADRAO....

















OK.... MAS É CLARO QUE AINDA NAO ACABAMOS... AINDA TEMOS OS VALUES 

NESTED NAQUELE CONJUNTO DE JSON DATA,


TEMOS QUE LIDAR COM ELES,


VALUES COMO 


ARRAYS E OBJECTS...








----------------








ok....







MAS AGORA O PROFESSOR NOS FALA DA FILE EM SI....






ELA TINHA COMPLICATED DATA...

TINHA NESTED DATA...








--> AGORA 1 EXEMPLO COM NESTED ARRAYS/OBJECTS:






//HANDLING NESTED DATA

SELECT RAW_FILE:job::STRING as JOB from OUR_FIRST_DB.PUBLIC.JSON_RAW;















--> ISSO NAO É IDEAL, SIM...











MAS, FELIZMENTE,




TEMOS 1 OPTION BEM FÁCIL


DE LIDAR COM ISSO, NO SNOWFLAKE..
.





VEREMOS ISSO NA PRÓXIMA AULA,

""HEAVY NESTING""....





